 <%=javascript_include_tag "chess" %>
 <style type="text/css">
.highlight-white {
  -webkit-box-shadow: inset 0 0 3px 3px yellow;
  -moz-box-shadow: inset 0 0 3px 3px yellow;
  box-shadow: inset 0 0 3px 3px yellow;  
}
.highlight-black {
  -webkit-box-shadow: inset 0 0 3px 3px blue;
  -moz-box-shadow: inset 0 0 3px 3px blue;
  box-shadow: inset 0 0 3px 3px blue;  
}
</style>
 <%=javascript_include_tag "chess" %>
<div style="display: inline-flex;">
	<div id="board" style="width: 400px"></div>
	<div style="float:left; height: 396px; overflow: scroll;"><span id="pgn"></span></div>
</div>
	<p>Status: <span id="status"></span></p>
	<button class="start" onclick="myFunction()">Play</button>
	<button id="stop" onclick="myStopFunction()" disabled>Stop</button>
	<button class="start" onclick="makeRandomMove()" >Previous</button>
	<button class="start" onclick="makeRandomMove()" >Next</button>
<script>
	var board,
  boardEl = $('#board'),
  game = new Chess(),
  squareClass = 'square-55d63',
  squareToHighlight,
  colorToHighlight;
  statusEl = $('#status'),
  fenEl = $('#fen'),
  pgnEl = $('#pgn');
  var moveAnimator;
  var canAnimate = true;
  var connection_id;
  var dispatcher = new WebSocketRails('localhost:3000/websocket');
  dispatcher.on_open = function(data) {
    var connectionObj = { connection_id: data.connection_id, nick_name: "nick_name" }
    connection_id = data.connection_id;
    dispatcher.trigger('connected',  connectionObj);
    var channel = dispatcher.subscribe(data.connection_id);
    channel.bind('message', function(data) {

      console.log('channel event received: ' + data);
    });
  }

  // dispatcher.bind('message.send', function(task) {
  //   console.log('successfully created ');
  // });

var updateStatus = function() {
  var status = '';

  var moveColor = 'White';
  if (game.turn() === 'b') {
    moveColor = 'Black';
  }

  // checkmate?
  if (game.in_checkmate() === true) {
    status = 'Game over, ' + moveColor + ' is in checkmate.';
  }

  // draw?
  else if (game.in_draw() === true) {
    status = 'Game over, drawn position';
  }

  // game still on
  else {
    status = moveColor + ' to move';

    // check?
    if (game.in_check() === true) {
      status += ', ' + moveColor + ' is in check';
    }
  }

  statusEl.html(status);
  fenEl.html(game.fen());
  pgnEl.html(game.pgn({ max_width: 12, newline_char: "<br />" }));

};

var makeRandomMove = function() {

  dispatcher.trigger('message', connection_id);

  var possibleMoves = game.moves({
    verbose: true
  });

  // exit if the game is over
  if (game.game_over() === true ||
    game.in_draw() === true ||
    possibleMoves.length === 0) return;

  var randomIndex = Math.floor(Math.random() * possibleMoves.length);
  var move = possibleMoves[randomIndex];

  if (move.color === 'w') {
    boardEl.find('.' + squareClass).removeClass('highlight-white');
    boardEl.find('.square-' + move.from).addClass('highlight-white');
    squareToHighlight = move.to;
    colorToHighlight = 'white';
  }
  else {
    boardEl.find('.square-55d63').removeClass('highlight-black');
    boardEl.find('.square-' + move.from).addClass('highlight-black');
    squareToHighlight = move.to;
    colorToHighlight = 'black';    
  }

  game.move(possibleMoves[randomIndex].san);
  board.position(game.fen());
  if(!canAnimate){
  	moveAnimator = setTimeout(makeRandomMove, 1000);
  }

};

var onMoveEnd = function() {
  updateStatus();
  boardEl.find('.square-' + squareToHighlight)
    .addClass('highlight-' + colorToHighlight);

};
function myFunction() {
    canAnimate = false;
    moveAnimator = setTimeout(makeRandomMove, 500);
    $('.start').prop('disabled', true);
    $('#stop').prop('disabled', false);
}

function myStopFunction() {
	$('.start').prop('disabled', false);
    $('#stop').prop('disabled', true);
    clearTimeout(moveAnimator);
    canAnimate = true;
}

var cfg = {
  position: 'start',
  onMoveEnd: onMoveEnd
};
board = new ChessBoard('board', cfg);

</script>